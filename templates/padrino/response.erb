# generated by rpcoder

class API::<%= func.name.to_camelcase %>Response
  include ActiveModel::Validations

  <%- unless func.responses.empty? -%>
  attr_reader :<%= func.responses.map {|i| "#{i.name.to_s.to_underscore}" }.join(', :') %>
  <%- end -%>

  <%- func.responses.each do |response| -%>
  <%- unless response.optional? -%>
  validate :<%= response.name.to_s.to_underscore %>, :presence => true
  <%- end -%>
  <%- end -%>
  validate :custom_validate

  def initialize(<%= func.responses.map {|i| "#{i.name.to_s.to_underscore}" }.join(', ') %>)
    <%- func.responses.each do |response| -%>
    @<%= response.name.to_s.to_underscore %> = <%= response.name.to_s.to_underscore %>
    <%- end -%>
  end

  def custom_validate
    true
  end

  def response
    raise 'invalid params' unless valid?
    {
      <%-
        response_params = func.responses.map{|i| [':' + i.name.to_s.to_camelcase(false), i.name.to_s.to_underscore].join(' => ') }.join(",Â¥n")
      -%>
      <%= response_params %>
    }
  end
end