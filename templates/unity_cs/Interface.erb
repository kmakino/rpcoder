/* generated by rpcoder */

namespace <%= get_namespace %>
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using Aiming.IteratorTasks;

	public delegate void RpcLogger(string log);
	public delegate void RpcErrorHandler(string errorType, string message, string targetScene);

	public interface <%= contract_name %>Interface
	{
		string BaseUrl { get; set; }
		RpcLogger Logger { get; set; }
		void AddCommonParameter(string key, string value);
		string RemoveCommonParameter(string key);
		RpcErrorHandler ErrorHandler{ get; set; }
		
		<%- rpcs.each do |func| -%>
		<%-
			successHandler = "Action<" + func.name.to_camelcase + "Response>"
			params_excluded_error_handler = func.params.map{|i| [i.array_or_type, i.name.to_s.to_camelcase(false)].join(' ') } + [successHandler + ' success']
			params = params_excluded_error_handler + ['RpcErrorHandler error']
		-%>
		/// <summary>
		/// <%= func.get_description %>
		/// </summary>
		<%- func.params.each do |param| -%>
		/// <param name="<%= param.name.to_s.to_camelcase(false) %>"><%= param.options[:description] %></param>
		<%- end -%>
		IEnumerator <%= func.name.to_camelcase %>(<%= params_excluded_error_handler.join(', ') %>);

		/// <summary>
		/// <%= func.get_description %>
		/// </summary>
		<%- func.params.each do |param| -%>
		/// <param name="<%= param.name.to_s.to_camelcase(false) %>"><%= param.options[:description] %></param>
		<%- end -%>
		IEnumerator <%= func.name.to_camelcase %>(<%= params.join(', ') %>, Action throwIfCancelRequested, Action<float> reportProgress);
		
		<%- end -%>
	}

	<%- rpcs.each do |func| -%>
	public class <%= func.name.to_camelcase + "Response" %>
	{
		<%- func.responses.each do |i| -%>
		public <%= i.array_or_type %> <%= i.name.to_s.to_camelcase %>;
		<%- end -%>
	}

	<%- end -%>
	public class RpcError
	{
		public string ErrorType { get; private set; }
		public string Message { get; private set; }
		public string TargetScene { get; private set; }
		
		public RpcError(string errorType, string message, string targetScene)
		{
			ErrorType = errorType;
			Message = message;
			TargetScene = targetScene;
		}
	}
}
