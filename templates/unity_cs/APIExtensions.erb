/* generated by rpcoder */
using System.Collections.Generic;
using Aiming.IteratorTasks;

namespace <%= get_namespace %>
{
	public static class <%= contract_name %>ApiExtensions
	{
        <%- rpcs.each do |func| -%>
        <%-
			response = func.name.to_camelcase + "Response"
			successHandler = "Action<" + response + ">"
			params = func.params.map{|i| [i.array_or_type, i.name.to_s.to_camelcase(false)].join(' ') }
		-%>
        public static Task<<%= response %>> <%= func.name.to_camelcase %>Aysnc(this <%= contract_name %>Interface api, <%= params.join(', ') %>)
        {
            return <%= func.name.to_camelcase %>Aysnc(api, <%= (func.params.map{|i| i.name.to_s.to_camelcase(false)}).join(', ') %>, null);
        }
                
        public static Task<<%= response %>><%= func.name.to_camelcase %>Aysnc(this <%= contract_name %>Interface api, <%= params.join(', ') %>, IProgress<float> progress)
        {
        	var cts = new CancellationTokenSource();
            System.Action throwIfCancellationRequested = () => cts.Token.ThrowIfCancellationRequested();
            System.Action<float> report = null;
            if (progress != null)
                report = progress.Report;
            return new Task<<%= response %>>(success => api.<%= func.name.to_camelcase %>(<%= (func.params.map{|i| i.name.to_s.to_camelcase(false)}).join(', ') %>, success, ThrowOnError, throwIfCancellationRequested, report)) { Cancellation = cts };
        }
        <%- end -%>

		private static void ThrowOnError(string errorType, string message, string targetScene)
		{
			throw new RpcException(errorType, message, targetScene);
		}
	}

	public partial class RpcException : System.Exception
	{
		public string ErrorType { get; private set; }
		public string TargetScene { get; private set; }
		
		public RpcException(string errorType, string message, string targetScene)
			: base(message != null ? message : "")
		{
			ErrorType = errorType;
			TargetScene = targetScene;
		}
		
		public RpcException(string errorType, string message, string targetScene, System.Exception innerException)
			: base(message != null ? message : "", innerException)
		{
			ErrorType = errorType;
			TargetScene = targetScene;
		}
	}
}
