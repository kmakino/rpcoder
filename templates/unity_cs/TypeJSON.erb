/* generated by rpcoder */
using System.Collections.Generic;
using System.Linq;
using LitJson;

namespace <%= @namespace %>
{
	public partial class <%= type.name %>
	{
		public override string ToString()
		{
			var items = new[]
			{
				<%- type.fields.each do |x| -%>
				"\"<%= x.name.to_s %>\":" +
				<%- if x.array? then -%>
					"[" + string.Join(",", <%= x.name.to_s.camelize %>.Select(i => i.ToString()).ToArray()) + "]",
				<%- elsif x.array_or_type.to_s == "string" then  -%>
					"\"" + <%= x.name.to_s.camelize %> + "\"",
				<%- elsif x.array_or_type.to_s == "bool" then  -%>
					(<%= x.name.to_s.camelize %> ? "true" : "false"),
				<%- elsif x.optional? -%>
					((<%= x.name.to_s.camelize %> != null) ? <%= x.name.to_s.camelize %>.ToString() : "null"),
				<%- else -%>
					<%= x.name.to_s.camelize %>.ToString(),
				<%- end -%>
				<%- end -%>
			};

			return "{" + string.Join(",", items) + "}";
		}
		
		public static <%= type.name %> Create(JsonData jsonData)
		{
			if(jsonData == null) return null;
			<%= type.name %> createdData = new <%= type.name %>();
			
			<%- type.fields.each do |field| -%>
			{
				JsonData temp;
				if(jsonData.TryGetValue("<%= field.name.to_s %>", out temp))
				{
				<%- if field.original_type? -%>
					<%- if field.array? -%>
					createdData.<%= field.name.to_s.camelize %> = JsonMapper.ToObject<<%= field.array_or_type %>>(temp.ToJson());
					<%- else -%>
						<%- if field.double? -%>
					if(temp != null && temp.<%= field.to_json_type? %>)
					{
						createdData.<%= field.name.to_s.camelize %> = (<%= field.array_or_type %>)temp;
					}
					else
					{
						createdData.<%= field.name.to_s.camelize %> = <%- if field.optional? -%>(int?)<%- else -%>(int)<%- end -%>temp;
					}
						<%- else -%>
					createdData.<%= field.name.to_s.camelize %> = (<%= field.array_or_type %>)temp;
						<%- end -%>
					<%- end -%>
				<%- else -%>
					<%- if field.array? -%>
					createdData.<%= field.name.to_s.camelize %> = <%= name_space %>.<%= field.type %>.CreateList(temp);
					<%- else -%>
					createdData.<%= field.name.to_s.camelize %> = <%= name_space %>.<%= field.type %>.Create(temp);
					<%- end -%>
				<%- end -%>
				}
				<%- if field.optional? -%>
				else
					createdData.<%= field.name.to_s.camelize %> = null;
				<%- end -%>
			}
			
			<%- end -%>
			
			return createdData;
		}
		
		public static List<<%= type.name %>> CreateList(JsonData jsonData)
		{
			if(jsonData == null) return null;
			List<<%= type.name %>> createdList = new List<<%= type.name %>>();
			for(int i = 0; i < jsonData.Count; ++i)
			{
				createdList.Add(<%= type.name %>.Create(jsonData[i]));
			}
			
			return createdList;
		}

		public static <%= type.name %>  Parse(string json)
		{
			return Create(LitJson.JsonMapper.ToObject(json));
		}

		public static List<<%= type.name %>> ParseList(string json)
		{
			return CreateList(LitJson.JsonMapper.ToObject(json));
		}
	}
}
