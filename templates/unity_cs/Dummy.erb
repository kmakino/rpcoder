/* generated by rpcoder */
using System;
using System.Collections;
using System.Collections.Generic;
using Aiming.IteratorTasks;

namespace <%= get_namespace %>
{
	public class <%= contract_name %>Dummy : <%= contract_name %>Interface
	{
		public RpcErrorHandler ErrorHandler { get; set; }
		public string BaseUrl { get; set; }
		public RpcLogger Logger { get; set; }
		public void AddCommonParameter(string key, string value)
		{
		}
		public string RemoveCommonParameter(string key)
		{
			return "";
		}

		private RpcError error = null;
		
		private Dictionary<string, ArrayList> dummySuccess = new Dictionary<string, ArrayList>();

		public void SetDummySuccess(string functionName, ArrayList success)
		{
			dummySuccess.Add(functionName, success);
		}

		private ArrayList GetDummySuccess(string functionName)
		{
			return dummySuccess[functionName];
		}

		public void SetDummyError(RpcError error)
		{
			this.error = error;
		}

		private bool IsError { get { return this.error != null; } }

		<%- rpcs.each do |func| -%>
		<%-
			response = func.name.to_camelcase + "Response"
			successHandler = "Action<" + response + ">"
			params_excluded_error_handler = func.params.map{|i| [i.array_or_type, i.name.to_s.to_camelcase(false)].join(' ') } + [successHandler + ' success']
			params = params_excluded_error_handler + ['RpcErrorHandler error']
		-%>
		public IEnumerator <%= func.name.to_camelcase %>(<%= params_excluded_error_handler.join(', ') %>)
		{
			return this.<%= func.name.to_camelcase %>(<%= (func.params.map{|i| i.name.to_s.to_camelcase(false) } + ['success']).join(', ') %>, null, null, null);
		}

		public IEnumerator <%= func.name.to_camelcase %>(<%= params.join(', ') %>, Action throwIfCancelRequested, Action<float> reportProgress)
		{
			if( !HandleError(error) )
			{
				<%- if func.has_responses? -%>
				ArrayList arguments = GetDummySuccess("<%= func.name.to_camelcase %>");
				<%- end-%>
				<%-
					index = -1
				-%>
				success(new <%= response %>(){<%= func.responses.map{|i| i.name.to_s.to_camelcase + " = (#{i.array_or_type})arguments[#{index+=1}]" }.join(",\n\t\t\t\t\t") %>});
			}
			yield return null;
		}

		<%- end -%>
		
		private bool HandleError(RpcErrorHandler errorHandler)
		{
			if( IsError )
			{
				if(errorHandler != null)
				{
					errorHandler(error.ErrorType, error.Message, error.TargetScene);
				}
				else
				{
					ErrorHandler(error.ErrorType, error.Message, error.TargetScene);
				}
				return true;
			}
			return false;
		}
	}
}
